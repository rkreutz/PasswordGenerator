name: AppStore Connect deployment
on: 
  workflow_dispatch:
    inputs:
      git-ref:
        description: Git Ref (Optional)    
        required: false
jobs:
  deploy:
    name: Deploy To Production
    runs-on: macos-latest
    env:
      XC_VERSION: ${{ '11.5' }}
      XC_PROJECT: ${{ 'PasswordGenerator.xcodeproj' }}
      XC_SCHEME: ${{ 'PasswordGenerator' }}
      XC_SDK: ${{ 'iphoneos' }}
      XC_CONFIGURATION: ${{ 'Release' }}
      XC_BUILD_DIR: ${{ '.build' }}
      XC_EXPORT_OPTIONS_FILE: "Support/ExportOptions.plist"
      XC_INFO_PLIST_PATH: "PasswordGenerator/Assets/Info.plist"
      IS_CI: 'true'
    steps:    
      - name: Select Xcode
        run: |
          sudo xcode-select -s "/Applications/Xcode_${XC_VERSION}.app"
      - name: Clone Repository (Latest)
        uses: actions/checkout@v2
        if: github.event.inputs.git-ref == ''
      - name: Clone Repository (Custom Ref)
        uses: actions/checkout@v2
        if: github.event.inputs.git-ref != ''
        with:
          ref: ${{ github.event.inputs.git-ref }}
      - name: Import Codesign Certs
        uses: apple-actions/import-codesign-certs@v1
        with: 
          p12-file-base64: ${{ secrets.CERTIFICATE_P12 }}
          p12-password: ${{ secrets.CERTIFICATE_PWD }}
      - name: 'Download Provisioning Profiles'
        uses: apple-actions/download-provisioning-profiles@v1
        with: 
          bundle-id: 'com.rkreutz.PasswordGenerator'
          issuer-id: ${{ secrets.APPSTORE_ISSUER_ID }}
          api-key-id: ${{ secrets.APPSTORE_API_KEY_ID }}
          api-private-key: ${{ secrets.APPSTORE_API_PRIVATE_KEY }}
      - name: 'Download Provisioning Profiles for AutoFill Extension'
        uses: apple-actions/download-provisioning-profiles@v1
        with: 
          bundle-id: 'com.rkreutz.PasswordGenerator.CredentialProvider'
          issuer-id: ${{ secrets.APPSTORE_ISSUER_ID }}
          api-key-id: ${{ secrets.APPSTORE_API_KEY_ID }}
          api-private-key: ${{ secrets.APPSTORE_API_PRIVATE_KEY }}
      - name: Set Build Number
        run: |
          /usr/libexec/PlistBuddy -c "Set :CFBundleVersion ${GITHUB_RUN_NUMBER}" "${XC_INFO_PLIST_PATH}"
      - name: "Archive App"
        run: |
          #!/usr/bin/env bash

          set -xeu
          set -o pipefail

          function finish() {
            ditto -c -k --sequesterRsrc --keepParent "${RESULT_BUNDLE_PATH}" "${RESULT_BUNDLE_PATH}.zip"
            rm -rf "${RESULT_BUNDLE_PATH}"
          }

          trap finish EXIT

          ARTIFACT_PATH="${XC_BUILD_DIR}/Artifacts"
          RESULT_BUNDLE_PATH="${ARTIFACT_PATH}/${XC_SCHEME}.xcresult"
          ARCHIVE_PATH="${XC_BUILD_DIR}/Archives/${XC_SCHEME}.xcarchive"
          DERIVED_DATA_PATH="${XC_BUILD_DIR}/DerivedData"

          rm -rf "${RESULT_BUNDLE_PATH}"

          xcodebuild \
              -project "${XC_PROJECT}" \
              -scheme "${XC_SCHEME}" \
              -configuration "${XC_CONFIGURATION}" \
              -sdk "${XC_SDK}" \
              -parallelizeTargets \
              -showBuildTimingSummary \
              -disableAutomaticPackageResolution \
              -derivedDataPath "${DERIVED_DATA_PATH}" \
              -archivePath "${ARCHIVE_PATH}" \
              -resultBundlePath "${RESULT_BUNDLE_PATH}" \
              CURRENT_PROJECT_VERSION="${GITHUB_RUN_NUMBER}" \
              IPHONEOS_DEPLOYMENT_TARGET='13.0' \
              archive

          xcrun xcodebuild \
              -exportArchive \
              -exportOptionsPlist "${XC_EXPORT_OPTIONS_FILE}" \
              -archivePath "${ARCHIVE_PATH}" \
              -exportPath "${ARTIFACT_PATH}/${XC_SCHEME}"

          # Zip up the Xcode Archive into Artifacts folder.
          ditto -c -k --sequesterRsrc --keepParent "${ARCHIVE_PATH}" "${ARTIFACT_PATH}/${XC_SCHEME}.xcarchive.zip"
      - name: Upload to TestFlight
        uses: Apple-Actions/upload-testflight-build@master
        with:
          app-path: ".build/Artifacts/PasswordGenerator/PasswordGenerator.ipa"
          issuer-id: ${{ secrets.APPSTORE_ISSUER_ID }}
          api-key-id: ${{ secrets.APPSTORE_API_KEY_ID }}
          api-private-key: ${{ secrets.APPSTORE_API_PRIVATE_KEY }}
      - name: Set Git Tag
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          #!/bin/sh
          set -eu

          # Set up .netrc file with GitHub credentials
          git_setup ( ) {
            cat <<- EOF > $HOME/.netrc
              machine github.com
              login $GITHUB_ACTOR
              password $GITHUB_TOKEN
              machine api.github.com
              login $GITHUB_ACTOR
              password $GITHUB_TOKEN
          EOF
            chmod 600 $HOME/.netrc

            git config --global user.email "actions@github.com"
            git config --global user.name "GitHub Action"
          }

          git_setup
          
          git fetch origin --tags
          
          VERSION_NUMBER=$(/usr/libexec/PlistBuddy -c "Print CFBundleShortVersionString" "${XC_INFO_PLIST_PATH}")
          
          git tag "${VERSION_NUMBER}/${GITHUB_RUN_NUMBER}"
          
          git push --tags
